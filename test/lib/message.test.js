const message = require('../../lib/message');
const chai = require('chai');
chai.should();
const openpgp = require('openpgp');

const privateKeyArmored = `-----BEGIN PGP PRIVATE KEY BLOCK-----

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
IpA1iwpnrY1PTYye
=zg29
-----END PGP PRIVATE KEY BLOCK-----`;

const publicKeyArmored = `-----BEGIN PGP PUBLIC KEY BLOCK-----

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
=k1FN
-----END PGP PUBLIC KEY BLOCK-----`;

describe('Message', function() {
    describe('encrypt', function() {
        it('should encrypt a message with public key', async function() {
            const publicKey = await openpgp.readKey({ armoredKey: publicKeyArmored });
            const newMessage = message.instance({
                text: 'Hello world', 
                publicKey
            });
            const encrypted = await newMessage.encrypt();
            encrypted.should.match(/-----BEGIN PGP MESSAGE-----/gi);
        });
    });
});